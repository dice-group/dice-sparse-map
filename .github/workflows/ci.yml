name: CI

on: [pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: linux-x64-clang-15
            os: ubuntu-22.04
            cxx: clang++-15
          - name: linux-x64-clang-16-sanitize
            os: ubuntu-20.04
            cxx: clang++-16
            cxx-flags: "-fsanitize=address,undefined"

          - name: linux-x64-gcc-12
            os: ubuntu-22.04
            cxx: g++-12
          - name: linux-x64-gcc-13-coverage
            os: ubuntu-22.04
            cxx: g++-13
            cxx-flags: -Werror --coverage
            gcov-tool: gcov-10

    name: ${{matrix.config.name}}
    runs-on: ${{matrix.config.os}}
    steps:
      # setup env
      - name: Add repos for for gcc-13 and clang-16
        run: |
          # gcc-13
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          
          # clang-16
          source /etc/os-release
          echo "deb http://apt.llvm.org/${UBUNTU_CODENAME}/ llvm-toolchain-${UBUNTU_CODENAME}-16 main" | sudo tee /etc/apt/sources.list.d/llvm-16.list
          curl https://apt.llvm.org/llvm-snapshot.gpg.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/llvm-16.gpg > /dev/null

      - name: Install tools
        run: |
          sudo apt-get install -y python3 python3-pip

      - name: Get minimum cmake version
        uses: lukka/get-cmake@v3.29.3
        with:
          cmakeVersion: 3.24

      - name: Install compiler
        id: install_cc
        uses: rlalik/setup-cpp-compiler@v1.2
        with:
          compiler: ${{ matrix.config.cxx }}

      - name: Install mold
        uses: rui314/setup-mold@v1

      - name: Configure conan
        run: |
          pip3 install conan==2.3.0
          
          # conan profile update is deprecated (https://github.com/conan-io/conan/issues/13205)
          # and they don't want you to use detect because it is unstable
          
          conan profile detect  # Force creation of conan directory structure, will be overwritten
          
          echo '{% set compiler, version, c_exe = detect_api.detect_default_compiler() %}'      > ~/.conan2/profiles/default
          echo '[settings]'                                                                    >> ~/.conan2/profiles/default
          echo 'os={{ detect_api.detect_os() }}'                                               >> ~/.conan2/profiles/default
          echo 'arch={{ detect_api.detect_arch() }}'                                           >> ~/.conan2/profiles/default
          echo 'build_type=Release'                                                            >> ~/.conan2/profiles/default
          echo 'compiler={{ compiler }}'                                                       >> ~/.conan2/profiles/default
          echo 'compiler.version={{ detect_api.default_compiler_version(compiler, version) }}' >> ~/.conan2/profiles/default
          echo 'compiler.libcxx=libstdc++11'                                                   >> ~/.conan2/profiles/default
          
          conan remote add -f dice-group https://conan.dice-research.org/artifactory/api/conan/tentris

      - name: Cache conan data
        id: cache-conan
        uses: actions/cache@v4.0.2
        with:
          path: ~/.conan2/p
          key: ${{ matrix.config.os }}-${{ matrix.config.cxx }}-conan

      - name: Check out sources
        uses: actions/checkout@v4.1.6

      - name: Get dependency provider
        run: |
          sudo apt-get install -y wget
          
          wget https://github.com/conan-io/cmake-conan/raw/develop2/conan_provider.cmake -O conan_provider.cmake

      - name: Configure CMake
        env:
          CC: ${{ steps.install_cc.outputs.cc }}
          CXX: ${{ steps.install_cc.outputs.cxx }}
          CXXFLAGS: ${{ matrix.config.cxx-flags }}
        run: cmake -B build_dir -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=conan_provider.cmake

      - name: Build
        working-directory: build_dir
        run: cmake --build . --parallel 2

      - name: Run tests
        working-directory: build_dir
        run: ctest --parallel 2 --verbose

      #- name: Coverage
      #  run: |
      #    sudo apt-get install -y lcov
      #    lcov -c -b ${{github.workspace}}/include -d ${{github.workspace}}/build -o ${{github.workspace}}/coverage.info --no-external --gcov-tool ${{matrix.config.gcov-tool}}
      #    bash <(curl -s https://codecov.io/bash) -f ${{github.workspace}}/coverage.info
      #  if: ${{matrix.config.name == 'linux-x64-gcc-13-coverage'}}
